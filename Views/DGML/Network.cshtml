
<style>
    #graph {
        margin-top: 300px;
        margin: 0;
        position: fixed;
        right: 0;
        left: 0;
        background-color: aliceblue;
    }
</style>
<div class="row">
    <div class="col-2">

    </div>
    <div class="col-8">
        <div class="alert alert-primary" role="alert">
            You can find your D3 graph here: <a target="_blank" rel="noopener noreferrer" href="@ViewBag.LINK_URL" class="alert-link">@ViewBag.LINK_URL</a>
        </div>
    </div>
    <div class="col-2">

    </div>
</div>
<div class="row">
    <div class="col-1">

    </div>
    <div class="col-10">
        <div id="graph">

        </div>
    </div>
    <div class="col-1">

    </div>
</div>

@section Scripts {
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
    // Feel free to change or delete any of the code you see in this editor!
    let width = screen.width-100;
    let height = screen.height-100;
    let svg = d3.select("#graph").append("svg")
        .attr("width", width)
        .attr("height", height);

    let graph = {
        "nodes": @Html.Raw(ViewBag.NODES),
        "links": @Html.Raw(ViewBag.LINKS)
    };


    let simulation = d3.forceSimulation()
        .nodes(graph.nodes);

    simulation
        .force("charge_force", d3.forceManyBody().strength(-4000))
        .force("center_force", d3.forceCenter(width / 2, height / 2))
        .force("links", d3.forceLink(graph.links).id(function (d) { return d.id; }))
        .force("collide", d3.forceCollide().radius(2));

    simulation
        .on("tick", ticked);

    //add encompassing group for the zoom
    var g = svg.append("g")
        .attr("class", "everything");

    //Create deffinition for the arrow markers showing relationship directions
    g.append("defs").append("marker")
        .attr("id", "arrow")
        .attr("viewBox", "0 -3 10 10")
        .attr("refX", 20)
        .attr("refY", 0)
        .attr("markerWidth", 28)
        .attr("markerHeight", 28)
        .attr("orient", "auto")
        .append("svg:path")
        .attr("d", "M0,-5L10,0L0,5");

    let link = g.append("g")
        .attr("class", "links")
        .selectAll("line")
        .data(graph.links)
        .enter().append("line")
        .attr("stroke", function (d) { return d3.color("black"); })
        .attr("marker-end", "url(#arrow)");

    let node = g.append("g")
        .attr("class", "nodes")
        .selectAll("circle")
        .data(graph.nodes)
        .enter()
        .append("circle")
        .attr("r", 100)
        .attr("fill", function (d) {
            return d3.color(d.color);
        })
        .style("stroke", function (d) {
            if (d.sourceOnly) return d3.color("#000080");

            return d3.color("#FF8D2F");
        });

    //add drag capabilities
    let drag_handler = d3.drag()
        .on("start", drag_start)
        .on("drag", drag_drag)
        .on("end", drag_end);

    drag_handler(node);

    let text = g.append("g").attr("class", "labels").selectAll("g")
        .data(graph.nodes)
        .enter().append("g")
        .append("text")
        .attr("x", -14)
        .attr("y", ".31em")
        .style("font-family", "sans-serif")
        .style("font-size", "30px")
        .text(function (d) { return d.name; });

    node.append("text")
        .attr("dx", function (d) { return -20 })
        .text(function (d) { return d.id });

    node.on("click", function (d) {
        d3.event.stopImmediatePropagation();
        self.onNodeClicked.emit(d.id);
    });

    node.append("title")
        .text(function (d) { return d.id; });

    //add zoom capabilities
    let zoom_handler = d3.zoom()
        .on("zoom", zoom_actions);

    zoom_handler(svg);

    //Drag functions
    //d is the node
    function drag_start(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    //make sure you can't drag the circle outside the box
    function drag_drag(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function drag_end(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }

    //Zoom functions
    function zoom_actions() {
        g.attr("transform", d3.event.transform)
    }

    function ticked() {

        //update circle positions each tick of the simulation
        node
            .attr("cx", function (d) { return d.x; })
            .attr("cy", function (d) { return d.y; });

        //update link positions
        link
            .attr("x1", function (d) { return d.source.x; })
            .attr("y1", function (d) { return d.source.y; })
            .attr("x2", function (d) { return d.target.x; })
            .attr("y2", function (d) { return d.target.y; });

        text
            .attr("transform", function (d) { return "translate(" + d.x + 8 + "," + d.y + 8 + ")"; });
    }
    $.ajax({
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        url: '/api/SVGStore/SaveSVG/@ViewBag.Graph_ID',
        type: 'POST',
        data: JSON.stringify({
            SVG: document.getElementsByTagName('svg')[0].outerHTML
        }),
        error: function () {
            console.log('<p>An error has occurred</p>');
        },
        dataType: 'json',
        success: function (data) {
            console.log(data);
        },

    });
   
</script>
}
